[General]
network = inet.networks.tsn.ubs_test
description = "UBS's experiment to verify scheduler's performance"

######################################################################
# 2016 28th Euromicro Conference on Real-Time Systems (ECRTS)
#
# Urgency-Based Scheduler for Time-Sensitive Switched Ethernet Networks
#
#


####################
# Flow Configuration
# Path	Sender	Receiver	Class		PCP		Flows	Length		DataRate 	
# 1		T0		L0			Class A		5		4		9,7,4,6		0.075,0.025,0.052,0.070
# 2		T1		L0			Class A		5		4		5,9,7,4		0.035,0.095,0.125,0.013
# 3		T2		L0			Class A		5		4		9,3,10,2	0.123,0.036,0.092,0.027
# 4		T3		L0			Class A		5		4		5,2,7,6		0.012,0.098,0.075,0.046
# 5		T3		L0			BE			0		1		2

###########################
# Application Configuration
#
#
# packet overhead:
#   58B = 8B (UDP) + 20B (IP) + 4B (802.1Q) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
######### Sender ##########
############T0#############
*.T0.numApps = 4
*.T0.app[*].typename = "UdpSourceApp"
*.T0.app[0..3].display-name = "Class A" + string(index)
*.T0.app[0..3].io.destAddress = "L0"
*.T0.app[0..3].io.destPort = 1000 + parent.index
    
# Flow 0
*.T0.app[0].source.packetLength = 378 B - 58B
*.T0.app[0].source.productionInterval = 0.0403ms
#*.T0.app[0].source.initialProductionOffset = 0.0403ms
    
# Flow 1
*.T0.app[1].source.packetLength = 294 B - 58B
*.T0.app[1].source.productionInterval = 0.0941ms
#*.T0.app[1].source.initialProductionOffset = 0.0941ms
    
# Flow 2
*.T0.app[2].source.packetLength = 168 B - 58B
*.T0.app[2].source.productionInterval = 0.0258ms
#*.T0.app[2].source.initialProductionOffset = 0.0258ms
    
# Flow 3
*.T0.app[3].source.packetLength = 252 B - 58B
*.T0.app[3].source.productionInterval = 0.0288ms
#*.T0.app[3].source.initialProductionOffset = 0.0288ms
############T1#############    
*.T1.numApps = 4
*.T1.app[*].typename = "UdpSourceApp"
*.T1.app[0..3].display-name = "Class A" + string(index)
*.T1.app[0..3].io.destAddress = "L0"
*.T1.app[0..3].io.destPort = 1100 + parent.index
    
# Flow 0
*.T1.app[0].source.packetLength = 210 B - 58B
*.T1.app[0].source.productionInterval = 0.0480ms
#*.T1.app[0].source.initialProductionOffset = 0.0480ms
    
# Flow 1
*.T1.app[1].source.packetLength = 378 B - 58B
*.T1.app[1].source.productionInterval = 0.0318ms
#*.T1.app[1].source.initialProductionOffset = 0.0318ms
    
# Flow 2
*.T1.app[2].source.packetLength = 294 B - 58B
*.T1.app[2].source.productionInterval = 0.0188ms
#*.T1.app[2].source.initialProductionOffset = 0.0188ms
    
# Flow 3
*.T1.app[3].source.packetLength = 168 B - 58B
*.T1.app[3].source.productionInterval = 0.1034ms
#*.T1.app[3].source.initialProductionOffset = 0.1034ms
############T2#############  
*.T2.numApps = 4
*.T2.app[*].typename = "UdpSourceApp"
*.T2.app[0..3].display-name = "Class A" + string(index)
*.T2.app[0..3].io.destAddress = "L0"
*.T2.app[0..3].io.destPort = 1200 + parent.index
    
# Flow 0
*.T2.app[0].source.packetLength = 378 B - 58B
*.T2.app[0].source.productionInterval = 0.0246ms
#*.T2.app[0].source.initialProductionOffset = 0.0246ms
    
# Flow 1
*.T2.app[1].source.packetLength = 126 B - 58B
*.T2.app[1].source.productionInterval = 0.0280ms
#*.T2.app[1].source.initialProductionOffset = 0.0280ms
    
# Flow 2
*.T2.app[2].source.packetLength = 420 B - 58B
*.T2.app[2].source.productionInterval = 0.0365ms
#*.T2.app[2].source.initialProductionOffset = 0.0365ms
    
# Flow 3
*.T2.app[3].source.packetLength = 84 B - 58B
*.T2.app[3].source.productionInterval = 0.0249ms
#*.T2.app[3].source.initialProductionOffset = 0.0249ms
############T3#############    
*.T3.numApps = 4
*.T3.app[*].typename = "UdpSourceApp"
*.T3.app[0..3].display-name = "Class A" + string(index)
*.T3.app[0..3].io.destAddress = "L0"
*.T3.app[0..3].io.destPort = 1300 + parent.index

# Flow 0
*.T3.app[0].source.packetLength = 210 B - 58B
*.T3.app[0].source.productionInterval = 0.1400ms
#*.T3.app[0].source.initialProductionOffset = 0.1400ms
    
# Flow 1
*.T3.app[1].source.packetLength = 84 B - 58B
*.T3.app[1].source.productionInterval = 0.0069ms
#*.T3.app[1].source.initialProductionOffset = 0.0069ms
    
# Flow 2
*.T3.app[2].source.packetLength = 294 B - 58B
*.T3.app[2].source.productionInterval = 0.0314ms
#*.T3.app[2].source.initialProductionOffset = 0.0314ms
    
# Flow 3
*.T3.app[3].source.packetLength = 252 B - 58B
*.T3.app[3].source.productionInterval = 0.0438ms
#*.T3.app[3].source.initialProductionOffset = 0.0438ms

## Flow 4
#*.T3.app[4].display-name = "BE"
#*.T3.app[4].io.destAddress = "L0"
#*.T3.app[4].io.destPort = 1304
#*.T3.app[4].source.packetLength = 1518B - 58B
#*.T3.app[4].source.productionInterval = 0.1ms


######### Receiver ##########
############L0#############
*.L0.numApps = 16
*.L0.app[*].typename = "UdpSinkApp"
*.L0.app[0..3].display-name = "T0 Class A" + string(index)
*.L0.app[4..7].display-name = "T1 Class A" + string(index)
*.L0.app[8..11].display-name = "T2 Class A" + string(index)
*.L0.app[12..15].display-name = "T3 Class A" + string(index)
#*.L0.app[16].display-name = "BE"
#*.L0.app[16].io.localPort = 1304

*.L0.app[0..3].io.localPort = 1000 + parent.index
*.L0.app[4..7].io.localPort = 1100 + parent.index - 4
*.L0.app[8..11].io.localPort = 1200 + parent.index - 8
*.L0.app[12..15].io.localPort = 1300 + parent.index - 12

########################
# Ethernet Configuration
#
# all Ethernet links have the same data rate
*.*.eth[*].bitrate = 1Gbps

#############################
# Stream Coding Configuration

# enable outgoing TSN streams
*.T*.hasOutgoingStreams = true
*.L0.hasOutgoingStreams = true

# steering stream identification and coding
*.T0.bridging.streamIdentifier.identifier.mapping = [{stream:"Class A0", packetFilter: expr(udp.destPort == 1000)},
													 {stream:"Class A1", packetFilter: expr(udp.destPort == 1001)},
													 {stream:"Class A2", packetFilter: expr(udp.destPort == 1002)},
													 {stream:"Class A3", packetFilter: expr(udp.destPort == 1003)}]

*.T1.bridging.streamIdentifier.identifier.mapping = [{stream:"Class A0", packetFilter: expr(udp.destPort == 1100)},
													 {stream:"Class A1", packetFilter: expr(udp.destPort == 1101)},
													 {stream:"Class A2", packetFilter: expr(udp.destPort == 1102)},
													 {stream:"Class A3", packetFilter: expr(udp.destPort == 1103)}]

*.T2.bridging.streamIdentifier.identifier.mapping = [{stream:"Class A0", packetFilter: expr(udp.destPort == 1200)},
													 {stream:"Class A1", packetFilter: expr(udp.destPort == 1201)},
													 {stream:"Class A2", packetFilter: expr(udp.destPort == 1202)},
													 {stream:"Class A3", packetFilter: expr(udp.destPort == 1203)}]

*.T3.bridging.streamIdentifier.identifier.mapping = [{stream:"Class A0", packetFilter: expr(udp.destPort == 1300)},
													 {stream:"Class A1", packetFilter: expr(udp.destPort == 1301)},
													 {stream:"Class A2", packetFilter: expr(udp.destPort == 1302)},
													 {stream:"Class A3", packetFilter: expr(udp.destPort == 1303)},
													 {stream:"BE", packetFilter: expr(udp.destPort == 1304)}]

*.T0.bridging.streamCoder.encoder.mapping = [{stream:"Class A0", pcp:5},
											 {stream:"Class A1", pcp:5},
											 {stream:"Class A2", pcp:5},
											 {stream:"Class A3", pcp:5}]

*.T1.bridging.streamCoder.encoder.mapping = [{stream:"Class A0", pcp:5},
											 {stream:"Class A1", pcp:5},
											 {stream:"Class A2", pcp:5},
											 {stream:"Class A3", pcp:5}]

*.T2.bridging.streamCoder.encoder.mapping = [{stream:"Class A0", pcp:5},
											 {stream:"Class A1", pcp:5},
											 {stream:"Class A2", pcp:5},
											 {stream:"Class A3", pcp:5}]

*.T3.bridging.streamCoder.encoder.mapping = [{stream:"Class A0", pcp:5},
											 {stream:"Class A1", pcp:5},
											 {stream:"Class A2", pcp:5},
											 {stream:"Class A3", pcp:5},
											 {stream:"BE", pcp:0}]
*.S*.bridging.streamCoder.encoder.mapping = [{stream: "CDT", pcp: 6},
                                             {stream: "Class A", pcp: 5},
                                             {stream: "Class B", pcp: 4},
                                             {stream: "BE", pcp: 0}]
*.S*.bridging.streamCoder.decoder.mapping = [{pcp: 6, stream: "CDT"},
                                             {pcp: 5, stream: "Class A"},
                                             {pcp: 4, stream: "Class B"},
                                             {pcp: 0, stream: "BE"}]

############################################
# Egress Per-stream Filtering Configuration

# enable egress per-stream filtering
*.T*.hasEgressTrafficFiltering = true
#*.L0.hasEgressTrafficFiltering = true

*.T0.bridging.streamFilter.egress.hasDefaultPath = false
*.T1.bridging.streamFilter.egress.hasDefaultPath = false
*.T2.bridging.streamFilter.egress.hasDefaultPath = false
*.T3.bridging.streamFilter.egress.hasDefaultPath = true
#*.L0.bridging.streamFilter.egress.hasDefaultPath = false

# egress per-stream filtering
*.T*.bridging.streamFilter.egress.meter[*].typename = "EligibilityTimeMeter"
*.T*.bridging.streamFilter.egress.filter[*].typename = "EligibilityTimeFilter"
#*.L0.bridging.streamFilter.egress.meter[*].typename = "EligibilityTimeMeter"
#*.L0.bridging.streamFilter.egress.filter[*].typename = "EligibilityTimeFilter"

*.T0.bridging.streamFilter.egress.numStreams = 4
*.T0.bridging.streamFilter.egress.classifier.mapping = {"Class A0": 0, "Class A1": 1, "Class A2": 2, "Class A3": 3}
    
*.T0.bridging.streamFilter.egress.meter[0].committedInformationRate = 75.0kbps
*.T0.bridging.streamFilter.egress.meter[0].committedBurstSize = 378B
    
*.T0.bridging.streamFilter.egress.meter[1].committedInformationRate = 25.0kbps
*.T0.bridging.streamFilter.egress.meter[1].committedBurstSize = 294B
    
*.T0.bridging.streamFilter.egress.meter[2].committedInformationRate = 52.0kbps
*.T0.bridging.streamFilter.egress.meter[2].committedBurstSize = 168B
    
*.T0.bridging.streamFilter.egress.meter[3].committedInformationRate = 70.0kbps
*.T0.bridging.streamFilter.egress.meter[3].committedBurstSize = 252B
    

*.T1.bridging.streamFilter.egress.numStreams = 4
*.T1.bridging.streamFilter.egress.classifier.mapping = {"Class A0": 0, "Class A1": 1, "Class A2": 2, "Class A3": 3}
    
*.T1.bridging.streamFilter.egress.meter[0].committedInformationRate = 35.0kbps
*.T1.bridging.streamFilter.egress.meter[0].committedBurstSize = 210B
    
*.T1.bridging.streamFilter.egress.meter[1].committedInformationRate = 95.0kbps
*.T1.bridging.streamFilter.egress.meter[1].committedBurstSize = 378B
    
*.T1.bridging.streamFilter.egress.meter[2].committedInformationRate = 125.0kbps
*.T1.bridging.streamFilter.egress.meter[2].committedBurstSize = 294B
    
*.T1.bridging.streamFilter.egress.meter[3].committedInformationRate = 13.0kbps
*.T1.bridging.streamFilter.egress.meter[3].committedBurstSize = 168B
    

*.T2.bridging.streamFilter.egress.numStreams = 4
*.T2.bridging.streamFilter.egress.classifier.mapping = {"Class A0": 0, "Class A1": 1, "Class A2": 2, "Class A3": 3}
    
*.T2.bridging.streamFilter.egress.meter[0].committedInformationRate = 123.0kbps
*.T2.bridging.streamFilter.egress.meter[0].committedBurstSize = 378B
    
*.T2.bridging.streamFilter.egress.meter[1].committedInformationRate = 36.0kbps
*.T2.bridging.streamFilter.egress.meter[1].committedBurstSize = 126B
    
*.T2.bridging.streamFilter.egress.meter[2].committedInformationRate = 92.0kbps
*.T2.bridging.streamFilter.egress.meter[2].committedBurstSize = 420B
    
*.T2.bridging.streamFilter.egress.meter[3].committedInformationRate = 27.0kbps
*.T2.bridging.streamFilter.egress.meter[3].committedBurstSize = 84B
    

*.T3.bridging.streamFilter.egress.numStreams = 4
*.T3.bridging.streamFilter.egress.classifier.mapping = {"Class A0": 0, "Class A1": 1, "Class A2": 2, "Class A3": 3}
    
*.T3.bridging.streamFilter.egress.meter[0].committedInformationRate = 12.0kbps
*.T3.bridging.streamFilter.egress.meter[0].committedBurstSize = 210B
    
*.T3.bridging.streamFilter.egress.meter[1].committedInformationRate = 98.0kbps
*.T3.bridging.streamFilter.egress.meter[1].committedBurstSize = 84B
    
*.T3.bridging.streamFilter.egress.meter[2].committedInformationRate = 75.0kbps
*.T3.bridging.streamFilter.egress.meter[2].committedBurstSize = 294B
    
*.T3.bridging.streamFilter.egress.meter[3].committedInformationRate = 46.0kbps
*.T3.bridging.streamFilter.egress.meter[3].committedBurstSize = 252B
############################################
# Ingress Per-stream Filtering Configuration

# enable ingress per-stream filtering
*.S*.hasIngressTrafficFiltering = true

# ingress per-stream filtering
*.S*.bridging.streamFilter.ingress.numStreams = 2
*.S*.bridging.streamFilter.ingress.classifier.mapping = {"Class A": 0, "Class B": 1}
*.S*.bridging.streamFilter.ingress.meter[*].typename = "EligibilityTimeMeter"
*.S*.bridging.streamFilter.ingress.filter[*].typename = "EligibilityTimeFilter"

*.S0.bridging.streamFilter.ingress.meter[0].committedInformationRate = 999Mbps
*.S0.bridging.streamFilter.ingress.meter[0].committedBurstSize = 3990 B
*.S0.bridging.streamFilter.ingress.meter[1].committedInformationRate = 800kbps * 10
*.S0.bridging.streamFilter.ingress.meter[1].committedBurstSize = 1000B * 10

*.S1.bridging.streamFilter.ingress.meter[0].committedInformationRate = 999Mbps
*.S1.bridging.streamFilter.ingress.meter[0].committedBurstSize = 3990 B
*.S1.bridging.streamFilter.ingress.meter[1].committedInformationRate = 800kbps * 10
*.S1.bridging.streamFilter.ingress.meter[1].committedBurstSize = 1000B * 10

###############################
# Traffic Shaping Configuration

# enable egress traff	ic shaping
*.*.hasEgressTrafficShaping = true

# asynchronous shaper for AVB classes
#*.T*.eth[*].macLayer.queue.queue[6].typename = "EligibilityTimeQueue"
#*.T*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[6].typename = "Ieee8021qAsynchronousShaper"

#*.L0.eth[*].macLayer.queue.queue[6].typename = "EligibilityTimeQueue"
#*.L0.eth[*].macLayer.queue.transmissionSelectionAlgorithm[6].typename = "Ieee8021qAsynchronousShaper"
   
*.*.eth[*].macLayer.queue.queue[5].typename = "EligibilityTimeQueue"
*.*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[5].typename = "Ieee8021qAsynchronousShaper"



